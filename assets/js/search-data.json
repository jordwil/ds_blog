{
  
    
        "post0": {
            "title": "Title",
            "content": "Integrated Project - 1 . Intro . You work for the online store Ice, which sells videogames all over the world. User and expert reviews, genres, platforms (e.g. Xbox or PlayStation), and historical data on game sales are available from open sources. . You need to identify patterns that determine whether a game succeeds or not. This allows you to put your money on a potentially hot new item and plan advertising campaigns. . In front of you is data going back to 2016. Let’s imagine that it’s December 2016 and you’re planning a campaign for 2017. . The important thing is to get experience working with data. It doesn&#39;t really matter whether you&#39;re forecasting 2017 sales based on data from 2016 or 2027 sales based on data from 2026. . The data set contains the abbreviation ESRB (Entertainment Software Rating Board). The ESRB evaluates a game&#39;s content and assigns an appropriate age categories, such as Teen and Mature. . import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from scipy import stats from pathlib import Path import missingno as mn sns.set() . f_path = Path(&quot;../datasets/games.csv&quot;) df = pd.read_csv(f_path) df.head() . Name Platform Year_of_Release Genre NA_sales EU_sales JP_sales Other_sales Critic_Score User_Score Rating . 0 Wii Sports | Wii | 2006.0 | Sports | 41.36 | 28.96 | 3.77 | 8.45 | 76.0 | 8 | E | . 1 Super Mario Bros. | NES | 1985.0 | Platform | 29.08 | 3.58 | 6.81 | 0.77 | NaN | NaN | NaN | . 2 Mario Kart Wii | Wii | 2008.0 | Racing | 15.68 | 12.76 | 3.79 | 3.29 | 82.0 | 8.3 | E | . 3 Wii Sports Resort | Wii | 2009.0 | Sports | 15.61 | 10.93 | 3.28 | 2.95 | 80.0 | 8 | E | . 4 Pokemon Red/Pokemon Blue | GB | 1996.0 | Role-Playing | 11.27 | 8.89 | 10.22 | 1.00 | NaN | NaN | NaN | . Data Preparation . String Prep . def lower_cols(df): df.columns = df.columns.str.lower() return df . df = lower_cols(df) . Date Prep . pd.to_datetime(df[&quot;year_of_release&quot;], format=&quot;%Y&quot;) . 0 2006-01-01 1 1985-01-01 2 2008-01-01 3 2009-01-01 4 1996-01-01 ... 16710 2016-01-01 16711 2006-01-01 16712 2016-01-01 16713 2003-01-01 16714 2016-01-01 Name: year_of_release, Length: 16715, dtype: datetime64[ns] . Numerical Prep . There are no missing values for sales figures. . df.loc[:, df.columns.str.endswith(&quot;sales&quot;)].info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 16715 entries, 0 to 16714 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 na_sales 16715 non-null float64 1 eu_sales 16715 non-null float64 2 jp_sales 16715 non-null float64 3 other_sales 16715 non-null float64 dtypes: float64(4) memory usage: 522.5 KB . There are many more user scores compared to critic scores. . df.loc[:, df.columns.str.endswith(&quot;score&quot;)].info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 16715 entries, 0 to 16714 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 critic_score 8137 non-null float64 1 user_score 10014 non-null object dtypes: float64(1), object(1) memory usage: 261.3+ KB . df.loc[:, df.columns.str.endswith(&quot;score&quot;)] . critic_score user_score . 0 76.0 | 8 | . 1 NaN | NaN | . 2 82.0 | 8.3 | . 3 80.0 | 8 | . 4 NaN | NaN | . ... ... | ... | . 16710 NaN | NaN | . 16711 NaN | NaN | . 16712 NaN | NaN | . 16713 NaN | NaN | . 16714 NaN | NaN | . 16715 rows × 2 columns . Missing Values . There&#39;s a tbd value that we can use a NaN value in its place . df[&quot;user_score&quot;].value_counts() . tbd 2424 7.8 324 8 290 8.2 282 8.3 254 ... 0.5 2 9.6 2 0.6 2 0 1 9.7 1 Name: user_score, Length: 96, dtype: int64 . df.loc[df[&quot;user_score&quot;] == &quot;tbd&quot;, &quot;user_score&quot;] = None df[&quot;user_score&quot;] = df[&quot;user_score&quot;].astype(float) . There are multiple ratings for certain games. Let&#39;s examine these. . Nothing duplicated . (df.duplicated()).sum() . 0 . dup_name = df[&quot;name&quot;].value_counts() &gt; 1 . df[df[&quot;name&quot;].map(dup_name).astype(&quot;bool&quot;)].sort_values(&quot;name&quot;) . name platform year_of_release genre na_sales eu_sales jp_sales other_sales critic_score user_score rating . 3862 Frozen: Olaf&#39;s Quest | DS | 2013.0 | Platform | 0.21 | 0.26 | 0.00 | 0.04 | NaN | NaN | NaN | . 3358 Frozen: Olaf&#39;s Quest | 3DS | 2013.0 | Platform | 0.27 | 0.27 | 0.00 | 0.05 | NaN | NaN | NaN | . 14658 007: Quantum of Solace | PC | 2008.0 | Action | 0.01 | 0.01 | 0.00 | 0.00 | 70.0 | 6.3 | T | . 9507 007: Quantum of Solace | DS | 2008.0 | Action | 0.11 | 0.01 | 0.00 | 0.01 | 65.0 | NaN | T | . 3120 007: Quantum of Solace | Wii | 2008.0 | Action | 0.29 | 0.28 | 0.01 | 0.07 | 54.0 | 7.5 | T | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 12648 pro evolution soccer 2011 | PC | 2010.0 | Sports | 0.00 | 0.05 | 0.00 | 0.01 | 79.0 | NaN | NaN | . 15612 uDraw Studio: Instant Artist | X360 | 2011.0 | Misc | 0.01 | 0.01 | 0.00 | 0.00 | 54.0 | 5.7 | E | . 8280 uDraw Studio: Instant Artist | Wii | 2011.0 | Misc | 0.06 | 0.09 | 0.00 | 0.02 | NaN | NaN | E | . 659 NaN | GEN | 1993.0 | NaN | 1.78 | 0.53 | 0.00 | 0.08 | NaN | NaN | NaN | . 14244 NaN | GEN | 1993.0 | NaN | 0.00 | 0.00 | 0.03 | 0.00 | NaN | NaN | NaN | . 7961 rows × 11 columns . Scores and rating values seem to be very sparse, and may not be very helpful for deeper analysis. . Note the large increase in missing values for the oldest games in the catalog. . mn.matrix(df.sort_values(&quot;year_of_release&quot;, ascending=False)) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x11c132a00&gt; . There&#39;s also a strong correlation between user score, critic score, and rating. . mn.heatmap(df) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x11cbfb160&gt; . There are two values with no name. Let&#39;s drop these. . (df[&quot;name&quot;].isna()).sum() . 2 . df = df.loc[~df[&quot;name&quot;].isna()] . df[&quot;rating&quot;].value_counts() . E 3990 T 2961 M 1563 E10+ 1420 EC 8 K-A 3 RP 3 AO 1 Name: rating, dtype: int64 . It&#39;s possible that no ratings were found based on the data collection method used for some of the games. . Here&#39;s how to create total sales for each game. . df.loc[:, &quot;total_sales&quot;] = (df.loc[:, df.columns.str.endswith(&quot;sales&quot;)]).sum(axis=1) . df[&quot;year_of_release&quot;].describe() . count 16444.000000 mean 2006.486256 std 5.875525 min 1980.000000 25% 2003.000000 50% 2007.000000 75% 2010.000000 max 2016.000000 Name: year_of_release, dtype: float64 . sns.kdeplot(df[&quot;year_of_release&quot;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x11c818730&gt; . The popularity of a platform can vary wildly. . Before the 2000&#39;s, there were fewer platforms available, and made much more money some years than platforms available in later years. . I&#39;m going to use 2010 data to the newest data available as my set that may help represent a more modern trend in sales. . Using values starting at 2010 will provide us with around 25% of the data and will give us a better look at the most modern platforms. . sns.boxplot(df[&quot;year_of_release&quot;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x10d66d430&gt; . df = df[df[&quot;year_of_release&quot;] &gt;= 2010] . Let&#39;s look at the distribution now: . sns.boxplot(df[&quot;year_of_release&quot;]) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x11c1c5df0&gt; . median_plat_year_df = df.groupby([&quot;year_of_release&quot;, &quot;platform&quot;])[ &quot;total_sales&quot; ].median() . market_share_platform = ( median_plat_year_df.groupby(&quot;year_of_release&quot;) .apply(lambda x: (x / x.sum()) * 100) .rename(&quot;market_share&quot;) .reset_index() ) . It looks like for platforms that have had a market share of 20% or more at some point, have on average is 3.2 years . successful_plat_years = ( market_share_platform.query(&quot;market_share &gt;= 20&quot;) .groupby(&quot;platform&quot;) .size() .sort_values(ascending=False) ) sns.kdeplot(successful_plat_years.values) plt.xlim(0) plt.xlabel(&quot;Years&quot;) plt.ylabel(&quot;Probability Density&quot;) plt.title(&quot;Number of years platform has acheived more than 20% market share&quot;) plt.show() . successful_plat_years.median() . 2.0 . On average, modern platforms hold a market share of 20% for 2 years . With this information, we can target platforms that have attained a market share of more than 20% for the first time in 2016, and consider those platforms having a high potential to maintain that market share next year. . sns.lineplot( data=market_share_platform, x=&quot;year_of_release&quot;, y=&quot;market_share&quot;, hue=&quot;platform&quot; ) plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0) . &lt;matplotlib.legend.Legend at 0x11c81c400&gt; . market_share_platform.query(&quot;market_share &gt;= 20&quot;) . year_of_release platform market_share . 3 2010.0 | PS3 | 31.050228 | . 6 2010.0 | X360 | 25.570776 | . 11 2011.0 | PS3 | 20.168067 | . 24 2012.0 | X360 | 25.144509 | . 29 2013.0 | PS4 | 38.012422 | . 39 2014.0 | PS4 | 27.334852 | . 45 2014.0 | XOne | 20.045558 | . 55 2015.0 | XOne | 20.675105 | . 61 2016.0 | Wii | 21.176471 | . 62 2016.0 | WiiU | 25.294118 | . Both the Wii and WiiU have yet to experience a second high market share event. I would consider investing in these platforms for 2017. . df[&quot;year_of_release&quot;] = pd.to_datetime(df[&quot;year_of_release&quot;], format=&quot;%Y&quot;) . g = ( df.groupby([&quot;year_of_release&quot;, &quot;platform&quot;])[&quot;total_sales&quot;] .median() .reset_index(&quot;platform&quot;) ) . g.pivot(columns=&quot;platform&quot;, values=&quot;total_sales&quot;) . platform 3DS DS PC PS2 PS3 PS4 PSP PSV Wii WiiU X360 XOne . year_of_release . 2010-01-01 NaN | 0.11 | 0.060 | 0.055 | 0.340 | NaN | 0.060 | NaN | 0.190 | NaN | 0.280 | NaN | . 2011-01-01 0.145 | 0.08 | 0.080 | 0.060 | 0.240 | NaN | 0.060 | 0.130 | 0.170 | NaN | 0.225 | NaN | . 2012-01-01 0.190 | 0.03 | 0.120 | NaN | 0.305 | NaN | 0.040 | 0.190 | 0.190 | 0.230 | 0.435 | NaN | . 2013-01-01 0.100 | 0.15 | 0.175 | NaN | 0.310 | 1.530 | 0.025 | 0.100 | 0.185 | 0.220 | 0.430 | 0.800 | . 2014-01-01 0.090 | NaN | 0.100 | NaN | 0.160 | 0.600 | 0.010 | 0.065 | 0.370 | 0.130 | 0.230 | 0.440 | . 2015-01-01 0.090 | NaN | 0.080 | NaN | 0.050 | 0.180 | 0.020 | 0.030 | 0.090 | 0.220 | 0.180 | 0.245 | . 2016-01-01 0.080 | NaN | 0.035 | NaN | 0.065 | 0.085 | NaN | 0.030 | 0.180 | 0.215 | 0.100 | 0.060 | . It looks like sales have stopped for certain systems; likely because a next generation platform overtook it. Certain platforms won&#39;t help us understand future sales like DS and PS2 . Furthermore, looking at our plots, it looks as if the Wii and Wiiu are experiencing very good sales in 2016. Futhermore, it looks like PS4 could experience a revival after a steep decline the previous year. . g.pivot(columns=&quot;platform&quot;, values=&quot;total_sales&quot;).drop([&quot;DS&quot;, &quot;PS2&quot;], axis=1).plot( figsize=(10, 10), sharex=True, sharey=True, logy=True ) plt.title(&quot;Total Sales by platform from 2010 to 2016&quot;) plt.ylabel(&quot;Total Sales USD Millions&quot;) plt.show() . Looking at platform that have been sucessful over the past 6 years, we can see that the X360, PS3, XOne, WiiU, Wii, and PS4 are the top contenders. . col_order = ( df.groupby(&quot;platform&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) plt.figure(figsize=(10, 10)) sns.boxplot(data=df, x=&quot;platform&quot;, y=&quot;total_sales&quot;, order=col_order) plt.yscale(&quot;log&quot;) plt.show() . It looks like critic and user score has a strong correleation. . And both log total sales and scores have a positive correlation, though critic scores seem to have a stronger relationship. . df[&quot;log_total_sales&quot;] = np.log(df[&quot;total_sales&quot;]) sns.pairplot( data=df[[&quot;log_total_sales&quot;, &quot;critic_score&quot;, &quot;user_score&quot;]], corner=True, kind=&quot;reg&quot; ) plt.show() . mult_plat = df[&quot;name&quot;].duplicated(keep=False) mp_df = df.query(&quot;@mult_plat&quot;) col_order = ( mp_df.groupby(&quot;platform&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) plt.figure(figsize=(10, 10)) sns.boxplot(data=df, x=&quot;platform&quot;, y=&quot;total_sales&quot;, order=col_order) plt.yscale(&quot;log&quot;) plt.ylabel(&quot;Total Sales in Millions USD&quot;) plt.show() . col_order = ( mp_df.groupby(&quot;genre&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) plt.figure(figsize=(10, 10)) sns.boxplot(data=df, x=&quot;genre&quot;, y=&quot;total_sales&quot;, order=col_order) plt.xticks(rotation=45) plt.yscale(&quot;log&quot;) plt.ylabel(&quot;Total Sales in Millions USD&quot;) plt.show() . Shooters seem to be the most profitable over the span we have selected. . df.columns . Index([&#39;name&#39;, &#39;platform&#39;, &#39;year_of_release&#39;, &#39;genre&#39;, &#39;na_sales&#39;, &#39;eu_sales&#39;, &#39;jp_sales&#39;, &#39;other_sales&#39;, &#39;critic_score&#39;, &#39;user_score&#39;, &#39;rating&#39;, &#39;total_sales&#39;, &#39;log_total_sales&#39;], dtype=&#39;object&#39;) . User profile for each region . regions = [&quot;na_sales&quot;, &quot;eu_sales&quot;, &quot;jp_sales&quot;] reg_sale_df = pd.melt( df, [&quot;name&quot;, &quot;platform&quot;, &quot;genre&quot;, &quot;rating&quot;], regions, &quot;region&quot;, &quot;sales&quot; ) . reg_sale_df.groupby([&quot;region&quot;, &quot;platform&quot;])[&quot;sales&quot;].median() . region platform eu_sales 3DS 0.00 DS 0.00 PC 0.05 PS2 0.00 PS3 0.05 PS4 0.08 PSP 0.00 PSV 0.00 Wii 0.02 WiiU 0.07 X360 0.08 XOne 0.07 jp_sales 3DS 0.05 DS 0.00 PC 0.00 PS2 0.01 PS3 0.02 PS4 0.01 PSP 0.03 PSV 0.03 Wii 0.00 WiiU 0.00 X360 0.00 XOne 0.00 na_sales 3DS 0.01 DS 0.05 PC 0.00 PS2 0.00 PS3 0.09 PS4 0.06 PSP 0.00 PSV 0.00 Wii 0.11 WiiU 0.11 X360 0.16 XOne 0.12 Name: sales, dtype: float64 . reg_sale_df . name platform genre rating region sales . 0 Kinect Adventures! | X360 | Misc | E | na_sales | 15.00 | . 1 Grand Theft Auto V | PS3 | Action | M | na_sales | 7.02 | . 2 Grand Theft Auto V | X360 | Action | M | na_sales | 9.66 | . 3 Pokemon Black/Pokemon White | DS | Role-Playing | NaN | na_sales | 5.51 | . 4 Call of Duty: Modern Warfare 3 | X360 | Shooter | M | na_sales | 9.04 | . ... ... | ... | ... | ... | ... | ... | . 15826 Strawberry Nauts | PSV | Adventure | NaN | jp_sales | 0.01 | . 15827 Aiyoku no Eustia | PSV | Misc | NaN | jp_sales | 0.01 | . 15828 Samurai Warriors: Sanada Maru | PS3 | Action | NaN | jp_sales | 0.01 | . 15829 Haitaka no Psychedelica | PSV | Adventure | NaN | jp_sales | 0.01 | . 15830 Winning Post 8 2016 | PSV | Simulation | NaN | jp_sales | 0.01 | . 15831 rows × 6 columns . col_order = ( df.groupby(&quot;platform&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) g = sns.catplot( kind=&quot;box&quot;, data=reg_sale_df, col=&quot;platform&quot;, x=&quot;region&quot;, y=&quot;sales&quot;, col_wrap=3, col_order=col_order, ) plt.ylim(0, 1.25) plt.show() . North American and European Sales seem to follow similar trends in platform for the most part. Japanese sales strongly differ and are more focused on PSP, PSV and 3DS. PC and PS4 games seem to have higher sales in Europe. . col_order = ( df.groupby(&quot;genre&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) g = sns.catplot( kind=&quot;box&quot;, data=reg_sale_df, col=&quot;genre&quot;, x=&quot;region&quot;, y=&quot;sales&quot;, col_wrap=3, col_order=col_order, ) plt.ylim(0, 1.25) plt.show() . Most sales look pretty similar at first glance. There&#39;s a large difference in role playing games, where Japan has seen the most sales. . 41% of values for rating are missing, which makes imputation a challenge and will reduce the sample size that we&#39;re analyzing, that being said, lets look at how ratings affect sales per region. . col_order = ( df.groupby(&quot;rating&quot;)[&quot;total_sales&quot;] .median() .sort_values(ascending=False) .index.to_list() ) g = sns.catplot( kind=&quot;box&quot;, data=reg_sale_df, col=&quot;rating&quot;, x=&quot;region&quot;, y=&quot;sales&quot;, col_wrap=3, col_order=col_order, ) plt.ylim(0, 1.25) plt.show() . I suspect the rating systems aren&#39;t the same over all regions, so it may be difficult to make any conclusions with this dataset. . Hypothesis Testing . Average user ratings of the Xbox One and PC platforms are the same. . hypo = &quot;Average user ratings of the Xbox One and PC platforms are the same.&quot; pc_scores = df.loc[df[&quot;platform&quot;] == &quot;PC&quot;, &quot;user_score&quot;].dropna() xone_scores = df.loc[df[&quot;platform&quot;] == &quot;XOne&quot;, &quot;user_score&quot;].dropna() alpha = 0.05 result = stats.ttest_ind(pc_scores, xone_scores) if result.pvalue &lt; 0.05: print( f&quot;P value is close to {result.pvalue:.5f}. Reject the null hypothesis: n n{hypo}&quot; ) else: print( f&quot;P value is close to {result.pvalue:.5f}. Fail to reject the null hypothesis: n n{hypo}&quot; ) . P value is close to 0.98100. Fail to reject the null hypothesis: Average user ratings of the Xbox One and PC platforms are the same. . Average user ratings for the Action and Sports genres are different. . hypo = &quot;Average user ratings for the Action and Sports genres are different.&quot; action_scores = df.loc[df[&quot;genre&quot;] == &quot;Action&quot;, &quot;user_score&quot;].dropna() sports_scores = df.loc[df[&quot;genre&quot;] == &quot;Sports&quot;, &quot;user_score&quot;].dropna() alpha = 0.05 result = stats.ttest_ind(action_scores, sports_scores) if result.pvalue &lt; 0.05: print( f&quot;P value is close to {result.pvalue:.5f}. Reject the null hypothesis: n{hypo}&quot; ) else: print( f&quot;P value is close to {result.pvalue:.5f}. Fail to reject the null hypothesis: n {hypo}&quot; ) . P value is close to 0.00000. Reject the null hypothesis: Average user ratings for the Action and Sports genres are different. . Conclusion . We do notice major differences in sales when stratifying between platforms, genre, and region. Here are the major take aways. . Shooters, Platformers, Sports, Fighting, and Racing are the top selling genres on average from our modern games. | Wii and WiiU may be poised to take on a large market share next year | Generally, Critic Scores are a good indicator on how well a game will sell | Action and Sports games very likely do not share a distribution for sales. Action games are better sellers generally in this timeframe. | Japanese sales don&#39;t share the same trends compared to North American and European Sales. | .",
            "url": "https://jordwil.github.io/ds_blog/2020/04/28/integrated-project.html",
            "relUrl": "/2020/04/28/integrated-project.html",
            "date": " • Apr 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jordwil.github.io/ds_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jordwil.github.io/ds_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}